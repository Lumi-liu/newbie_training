資料結構與演算法的練習
“一個檔中包含 n 個正整數,其中 n=10 的 7 次方,請編寫程式,將檔中的數按
昇冪排序。”,這是我做的第一個練習,這個練習對我的印象很深,因為它的資
料量是很大的磁片檔為 10^7,無法用一般的思路或方法進行解決,在查看書籍
的同時也在網上查找了相關的知識進行瞭解,最終這個程式才得以完成。
由於資料量太大,無法一次性放入記憶體中計算處理,這個時候咋辦呢?
分而治之,大而化小,也就是把整個大文件分為若干大小的幾塊,然後分別對每
一塊進行排序,最後完成整個過程的排序。其中用到了隨機生成資料,快速排序
和歸併排序的方法,快速排序的方法之前在學校學習資料結構的時候學過,但是
對於歸併排序的演算法就是比較陌生了,這做了這個練習之後我也對它以及勝者
樹,敗者樹有了進一步的瞭解。與快速排序相比,歸併排序的最大特點是,它是
一種穩定的排序方法。歸併排序一般多用於外排序。但它在內排方面也佔有重要
地位,因為它是基於比較的時間複雜度為 O(N*Log(N))的排序演算法中唯一穩定
的排序,所以在需要穩定內排序時通常會選擇歸併排序。歸併排序不要求對序列
可以很快地進行隨機訪問,所以在鏈表排序的實現中很受歡迎。
在之後的練習中有位操作,鏈表的操作,各種排序演算法的實現以及不
重複的取樣問題,這幾個練習基本生在學校的時候或多或少的瞭解過或學過,鏈
表分為單向鏈表,雙向鏈表以及迴圈鏈表,是一種物理存儲單元上非連續,非順
序的存儲結構,資料元素的邏輯順序是通過鏈表中的指標連結次序實現的。鏈表
由一系列結點組成,結點可以在運行時動態生成。每個結點包括兩個部分:一個
是存儲資料元素的資料欄,另一個是存儲下一個結點位址的指標域。相比於線性
表順序結構,操作複雜。使用鏈表結構可以克服陣列鏈表需要預先知道資料大小
的缺點,鏈表結構可以充分利用電腦記憶體空間,實現靈活的記憶體動態管理。
但是鏈表失去了陣列隨機讀取的優點,同時鏈表由於增加了結點的指針域,空間
開銷比較大。鏈表最明顯的好處就是,常規陣列排列關聯專案的方式可能不同於
這些資料項目目在記憶體或磁片上順序,資料的存取往往要在不同的排列順序中
轉換。而鏈表是一種自我指示資料類型,因為它包含指向另一個相同類型的資料
的指標。鏈表允許插入和移除表上任意位置上的節點,但是不允許隨機存取。
